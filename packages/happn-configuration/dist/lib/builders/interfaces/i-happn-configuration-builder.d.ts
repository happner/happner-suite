import { ICoreBuilder } from './i-core-builder';
export interface IHappnConfigurationBuilder extends ICoreBuilder {
    withCacheStatisticsCheckPointAuthOverride(max: number, maxAge: number): any;
    withCacheStatisticsCheckPointAuthTokenOverride(max: number, maxAge: number): any;
    withCacheStatisticsInterval(interval: number): any;
    withCacheStatisticsSecurityGroupPermissionsOverride(max: number, maxAge: number): any;
    withCacheStatisticsSecurityGroupsOverride(max: number, maxAge: number): any;
    withCacheStatisticsSecurityPasswordsOverride(max: number, maxAge: number): any;
    withCacheStatisticsSecurityUserPermissionsOverride(max: number, maxAge: number): any;
    withCacheStatisticsSecurityUsersOverride(max: number, maxAge: number): any;
    withConnectSecurityExclusion(exclusion: string): any;
    withConnectSecurityForbiddenResponsePath(path: string): any;
    withConnectSecurityUnauthorizedResponsePath(path: string): any;
    withDataStore(name: string, provider: string, isDefault: boolean, isFsync: boolean, dbFile: string, fileName: string): any;
    withDataIsSecure(isSecure: boolean): any;
    withProtocolAllowNestedPermissions(isAllowed: boolean): any;
    withProtocolInboundLayer(layer: Function): any;
    withProtocolIsSecure(isSecure: boolean): any;
    withProtocolOutboundLayer(layer: Function): any;
    withPublisherAcknowledgeTimeout(acknowledge: number): any;
    withPublisherTimeout(timeout: number): any;
    withSecurityActivateSessionManagement(activate: boolean): any;
    withSecurityAccountLockoutEnabled(enabled: boolean): any;
    withSecurityAccountLockoutAttempts(attempts: number): any;
    withSecurityAccountLockoutRetryInterval(retryInterval: number): any;
    withSecurityAdminPassword(password: string): any;
    withSecurityAdminPublicKey(publicKey: string): any;
    withSecurityAdminGroupCustomData(fieldName: string, fieldValue: string): any;
    withSecurityAdminGroupPermission(permissionKey: string, actionPath: string): any;
    withSecurityAllowAnonymousAccess(allowAnonymous: boolean): any;
    withSecurityAuthProvider(name: string, instance: any): any;
    withSecurityCookie(name: string, domain: string, cookie: string): any;
    withSecurityLogSessionActivity(shouldLog: boolean): any;
    withSecurityLockTokenToLoginType(shouldLock: boolean): any;
    withSecurityLockTokenToUserId(shouldLock: boolean): any;
    withSecurityPbkdf2Iterations(iterations: number): any;
    withSecurityProfile(name: string, sessionKey: string, sessionMatchOn: any, policyTTL: number, policyInactiveThreshold: number): any;
    withSessionActivityTTL(ttl: number): any;
    withSessionTokenSecret(secret: string): any;
    withSubscriptionAllowNestedPermissions(shouldAllow: boolean): any;
    withSubscriptionTreeSearchCacheSize(size: number): any;
    withSubscriptionTreePermutationCacheSize(size: number): any;
    withSubscriptionTreeTimeout(timeout: number): any;
    withSubscriptionTreeFilterFunction(func: Function): any;
    withSystemName(name: string): any;
    withTransportCert(cert: string): any;
    withTransportCertPath(certPath: string): any;
    withTransportKeepAliveTimout(timeout: number): any;
    withTransportKey(key: string): any;
    withTransportKeyPath(keyPath: string): any;
    withTransportMode(mode: string): any;
}
